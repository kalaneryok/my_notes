1.下载uboot的git代码编译uboot需要gcc6.0以上版本
	1.编译发现swig没有，安装 sudo apt-get install swig
	2.在编译发现Python.h没找到安装sudo apt-get install python-dev
	3.在编译缺少dtc工具 安装dtc  sudo apt-get install device-tree-compiler
2.下载安装sunxitool工具
	1.安装usb库
		sudo apt-get install libusb-1.0-0-dev
	2.下载sunxi-tool源码或者网网盘下载
		git clone https://github.com/linux-sunxi/sunxi-tools
	3.编译详情可以看github上面的readme
		make tools
		sudo make install-tools 安装到/usr/local/bin目录下
3.安装tftp服务器
	1.有没有sudo dpkg -l tftpd-hpa)    tftp-hpa,tftpd-hpa,前面的是客户端，后面的是服务程序
	2.安装 
	sudo apt-get install tftp-hpa
	sudo apt-get install tftpd-hpa
	2.配置服务文件 
	vi /etc/default/tftp-hpa
	TFTP_USERNAME="tftp"
	TFTP_DIRECTORY="/home/ak/zhizuo/tftpboot"
	TFTP_ADDRESS="127.0.0.1"  这个IP地址先试用localhost测试后续真实的修改成真实的网卡地址
	TFTP_OPTIONS="-l -c -s"  这个要修改成这样

	要把tftp目录权限设置成777不然可能会出现不能上传的问题
	3. sudo service tftpd-hpa restart
	4. netstat -au | grep tftp            查看服务是否已经启动 
	如果显示udp        0      0 *:tftp                  *:*，说明你的tftp服务已经启动
	5. 然后你可以把需要下载到开发板的文件，拷贝到/var/lib/tftpboot
	6.记得使用桥接模式才能下载假如是在开发板上的话
	测试：
		因为已经下载了客户端所以可以在本机测试
		1.tftp localhost  put aaa    get aaa  上传和下载 q退出
		
kernel
	1.下载源码  解压  tar -xzf linux.tar.gz
	2.make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig
	/bin/sh: 1: bison: not found，，安装 sudo apt-get install bison
	/bin/sh: 1: flex: not found       sudo apt-get install flex
	3.make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- dtbs
	dtb文件在arch/arm64/boot/dts/相关平台的目录下
	Image则在arm64/boot下

	
在uboot下
1.设置serverip  iddr
	setenv ipaddr 192.168.5.120
	setenv serverip 192.168.5.16
2.tftp uimage 和dtbs
	tftp 40080000 Image
	tftp 4FA00000 sun50i-h5-orangepi-pc2.dtb
	booti 40080000 - 4fa00000
3.挂载rootfs内核就起来了
4.挂载nfs文件系统
	https://blog.csdn.net/thisway_diy/article/details/68067350
	https://blog.csdn.net/qq695104815/article/details/79050780
	https://www.cnblogs.com/Jasonsblog/p/3778485.html
	1.在linux下安装nfs服务器
	先下载NFS服务器，演示如下： 
	sudo apt-get install nfs-kernel-server 
	2.创建nfs目录注意修改权限777
	3.修改配置文件

	NFS服务的配置文件路径：/etc/exports,刚安装完的配置文件只有一些说明。

	#sudo vi /etc/exports
	在里面加入

	/nfsboot *(rw,sync,no_root_squash)
	说明：

	/nfsboot是要共享的目录

	*代表允许所有的网络段访问，为安全起见，可指定网络号段，如202.38.214*，注意：*与（之间不能有空格，否则开发板挂载之后将只有读权限而没有写权限。

	rw是可读写权限

	sync是资料同步写入内存和硬盘

	no_root_squash是NFS客户端分享目录使用者的权限，
	如果客户端使用的是root用户，那么对于该共享目录而言，该客户端就具有root权限
	4.重启服务

	使用以下命令重启服务

	#sudo /etc/init.d/nfs-kernel-server restart
	5.测试服务器

	查看服务器目录和权限

	#showmount -e
	6.本地挂载测试
		使用mount   
		mount [-t vfstype] [-o options] device dir 
		mount 的用法，-t表示挂载文件系统 nfs表示挂载nfs文件系统
		sudo mount -t nfs 192.168.100.128:/home/ak/zhizuo/nfsDir/rootfs ~/zhizuo/my_GitWork/temp/aaa/
		                  localhost：也可以
		即把分享的目录挂载到了 aaa目录下
		可以使用df 查看
		不用时umount掉aaa即可
	

		
5.开发板与宿主机通过NFS连接，有时候会会出现下列问题:connection refused

 nfs mount 默认选项包括文件锁，依赖于portmap提供的动态端口分配功能。
        解决方法：kill 文件锁（lockd）或者mount -o nolock

        于是尝试mount -o nolock -t nfs 192.168.43.143:/home/yuming/nfs/rootfs /mnt，正常工作。
--------------------- 
作者：念念有余 
来源：CSDN 
原文：https://blog.csdn.net/u012142460/article/details/78832355 
版权声明：本文为博主原创文章，转载请附上博文链接！
	
6.开发板电脑虚拟机三者ping通必须使用桥接模式切只能设置在同一网段
	1.设置虚拟机-》设置-》桥接模式
	2.编辑-》虚拟网络编辑器-》设置桥接到那个网卡
	3.手动设置虚拟机的网络ip网关。
	4.测试
	比如，我电脑wifiip 192.168.5.111，那么我的电脑网口就要设值成192.168.5.16，我虚拟机必须使用桥接，将vm0桥接到我
	真实的物理网卡上去，再将我的开发板设置为192.168.5.120

7.使用initramfs可以先让系统起来挂载nfs看能不能挂载上，但是需要参数不然挂载不上
	mount -t nfs -o nolock 192.168.5.111:/home/ak/zhizuo/nfsDir/rootfs /mnt/
	1.这个问题
		IP-Config: Cannot add default route (-101).
		虚拟机的网关和设备的网关设置没有一致导致的。
	修改uboot的bootarg还是不能直接挂载成功
	setenv bootargs "root=/dev/nfs nfsroot=192.168.5.111:/home/ak/zhizuo/nfsDir/rootfs ip=192.168.5.120:192.168.5.111:192.168.5.1:255.255.255.0::eth0:off init=/linuxrc"
rootfs
	1.去官网下载最新busybox    https://busybox.net/
	2.解压tar -xjf busybox-1.30.1.tar.bz2
	修改Makefile，找到 （此处需修改Makefile）
	ARCH ？= $(SUBARCH)
	CROSS_COMPILE ?= 
		 改为：
	ARCH ？= arm （后面不能有空格）
	CROSS_COMPILE ?= arm-linux-
	3.解压后make defconfig
	4.make menuconfig  会出错curses.h找不到 安装sudo apt-get install libncurses5-dev
	5.make CROSS_COMPILE=aarch64-linux-gnu-    make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-   指定编译器编译
	6.make install 生成_install目录
	7.将_install目录下的文件全部拷贝到nfs服务器下顺便在创建其他目录和文件
		cp ./* rootfs/ -ra
		切记一定要带上-a的参数，因为bin目录里大部分都是链接，如果不带-a的参数，拷过去之后会做相应的复制，不再是链接的形式
	8.创建必须目录
		1.mkdir  dev etc lib mnt opt proc  srv sys tmp  var
		必须创建这连个东西，不让没输出 dev目录下创建
		sudo mknod console c 5 1    //创建console字符设备,

		sudo mknod null c 1 3    //创建null 字符设备,
		2.  拷贝Busybox-1.16.1/examples/bootfloopy/etc/* 到当前目录下
        #cp –r busybox-1.16.1/examples/bootfloopy/etc/*  rootfs/etc
		3.修改inittab，

                原始文件为：

　　　　　　　　1 ::sysinit:/etc/init.d/rcS
　　　　　　　　2 ::respawn:-/bin/sh
　　　　　　　　3 tty2::askfirst:-/bin/sh
　　　　　　　　4 ::ctrlaltdel:/bin/umount -a -r

　　　　　　修改后为：

        ---（1）：开机免登陆，直接打开shell（前面数字为行号）　　　　　　　　 

　　　　　　　　1 ::sysinit:/etc/init.d/rcS
　　　　　　　　2 #::respawn:-/bin/sh
　　　　　　　　3 #::respawn:-/bin/login
　　　　　　　　4 console::askfirst:-/bin/sh
　　　　　　　　5 #tty2::askfirst:-/bin/sh
　　　　　　　　6 ::ctrlaltdel:/bin/umount -a -r

        ---（2）：开机需要登陆（前面数字为行号）　　　　　　　　 

　　　　　　　　1 ::sysinit:/etc/init.d/rcS
　　　　　　　　2 #::respawn:-/bin/sh
　　　　　　　　3 ::respawn:-/bin/login
　　　　　　　　4 #console::askfirst:-/bin/sh
　　　　　　　　5 #tty2::askfirst:-/bin/sh
　　　　　　　　6 ::ctrlaltdel:/bin/umount -a -r
		4.这个可以不用密码登入不改
			2)拷贝虚拟机上的/etc/passwd, /etc/group, /etc/shadow到rootfs/etc下

 

        # cp /etc/passwd   rootfs/etc
        # cp /etc/group    rootfs/etc 
        # cp /etc/shadow   roofs/etc

 

	　　对以下三个文件修改，只保存与root相关的项，根据具体情况内容会有所不同。

	　　修改passwd为root:x:0:0:root:/root:/bin/sh，即只保存与root相关项，而且最后改成/bin/ash。

	　　修改group为root:x:0:root

	　　修改shadow为root:$1$x9yv1WlB$abJ2v9jOlOc9xW/y0QwPs.:14034:0:99999:7:::

	　　登陆开发板时需输入用户名密码，同虚拟机相同
		5.4.安装glibc库  去你那个编译的工具安装目录下的lib目录下拷贝库，这个很重要没有起不来

		mkdir lib              //在mini_fs目录下创建个lib目录 (存放库函数)

		cd /work/tools/gcc-3.4.5-glibc-2.3.6/arm-linux/lib     //进入源目录

		cp *.so* /work/nfs_root/mini_fs/lib -d        //复制glibc库到lib目录(*:匹配符,-d:保持链接)
		6.3）修改profile
			#可执行程序 环境变量
		　　PATH=/bin:/sbin:/usr/bin:/usr/sbin          
			#动态链接库 环境变量
		　　export LD_LIBRARY_PATH=/lib:/usr/lib        
		　　/bin/hostname AK-PIPC2    主机名
		　　USER="`id -un`"
		　　LOGNAME=$USER
		　　HOSTNAME='/bin/hostname'
		　　PS1='\u@\H:[\w]\n\$ '
                          

			4)修改 etc/init.d/rc.S文件 （不影响启动）

		　　/bin/mount -n -t ramfs ramfs /var

		　　/bin/mount -n -t ramfs ramfs /tmp

		　　/bin/mount -n -t sysfs none /sys

		　　/bin/mount -n -t ramfs none /dev

		　　/bin/mkdir /var/tmp

		　　/bin/mkdir /var/modules

		　　/bin/mkdir /var/run

		　　/bin/mkdir /var/log

		　　/bin/mkdir -p /dev/pts                    //telnet服务需要

		　　/bin/mkdir -p /dev/shm                    //telnet服务需要

		　　#echo /sbin/mdev > /proc/sys/kernel/hotplug//USB自动挂载需要

		　　/sbin/mdev -s         //启动mdev在/dev下自动创建设备文件节点

		　　/bin/mount -a

		　　 #######配置网络################################

		　　 /sbin/ifconfig lo 127.0.0.1 netmask 255.0.0.0

		　　/sbin/ifconfig eth0 192.168.1.70
		　　/sbin/ifconfig eth0 netmask 255.255.255.0
		　　/sbin/route add default gw 192.168.1.1 eth0

		　　/sbin/ifconfig eth1 192.168.1.71 netmask 255.255.255.0
		　　/sbin/route add default gw 192.168.1.1 eth1
	
			5.5)修改etc/fstab文件，增加以下文件 （不影响启动）

			none   /dev/pts    devpts   mode=0622      0 0
			tmpfs  /dev/shm    tmpfs    defaults       0 0
	9.以上制作方式挂载不上nfs文件系统后来发现内核没有配置网卡驱动
	10.复制uboot下的网卡驱动文件到	drivers/net/ethernet/allwinner/ 及修改该目录下的Makefile将驱动编译进内核
		config文件
			CONFIG_ETHERNET=y
			CONFIG_NET_VENDOR_ALLWINNER=y
			#CONFIG_SUN4I_EMAC=y
			CONFIG_SUN8I_EMAC=y
	11.上述修改后还是挂载不上，现在计划使用initramfs来确定网卡驱动是否可以用了
initranfs
	1.自行编写init程序验证
	2.编写init.c
	#include< stdio.h>

	int main(void) 
	{ 
			char ch; 

			printf("Test /sbin/init main....\n"); 
			printf("0123456789abcdefghijklmnopqrstuvwxyz\n"); 
			printf("ABCDEFGHIJKLMNOPQRSTUVWXYZ9876543210\n"); 

			while ((ch = getchar()) != 'q') 
					printf("%c", ch); 

			return 0; 
	}
	3.编译 aarch64-linux-gnu-gcc -static -o init init.c
	4.打包成initranfs格式
		1.新建一个rootfs目录 记住这个目录的地址initramfs——dir
		2.将编译好的init 放到上面地址的目录下  这个目录下同时必须要有dev目录和console不然没打印输出
		3.进到initranfs目录下执行打包命令
			find . | cpio -H newc -o | gzip -9 > ./initramfs.cpio.gz

		4.在内核中将这个包文件包含进去
			1.配置内核
				1.确保general setup 中选中了init ram filsystem
				2.指定包文件的路径initramfs source file 就填上面的路径
				3.假如找不到也可以在config文件中指定
				这个kconfig在user目录下的
				CONFIG_INITRAMFS_SOURCE="/home/ak/zhizuo/nfsDir/initranfs/rootfs/initramfs.cpio.gz"
			2.device driver 设置
				1.block devices-> 染blockdevicesupport
				2.或者CONFIG_BLK_DEV_RAM=y
		5.在uboot下设置	
			1.tftp 4FA00000 sun50i-h5-orangepi-pc2.dtb
			2.tftp 40080000 Image
			3.setenv bootargs "root=/dev/ram0 rdinit=/init"    initramfs一定要用rdinit
			4.booti 40080000 - 4fa00000
			后面就发现之前编译的init程序就起来了
		6.同样用上面步骤busybox创建的根文件系统打包后，uboot输入参数为rdinit=/linuxrc就行了
				