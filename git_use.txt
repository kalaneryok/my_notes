https://git-scm.com/book/zh/v2
------------------------------------------------------------
解决git clone 慢的教程
1.windows下载

方法二具体操作：
step1 在我的电脑路径中输入：C:\Windows\System32\drivers\etc
step2 点击hosts文件，右键属性，修改本机用户的权限，给予全部权限，保存设置
step3 双击hosts文件，以记事本形式打开，在原始文本下一行粘贴上以下地址：
219.76.4.4 github-cloud.s3.amazonaws.com
也可以添加其他的地址：
地址来源：在http://tool.chinaz.com/dns中搜索 github.global.ssl.fastly.net 和 github.com
分别找到延迟小的地址，加入到hosts文件中即可
保存
step4 再次打开你要下载的github页面，点击download zip，此时发现速度飙升到3Mb/s
――――――――――――――――
版权声明：本文为CSDN博主「做一只AI小能手」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_37285386/article/details/86569141
2.ubuntu命令下载
查找域名对应的ip地址，并修改hosts文件

nslookup github.global.ssl.fastly.Net
nslookup github.com 

将下列内容加入 /etc/hosts文件中 就是上面查出来的内容

151.101.76.249 http://global-ssl.fastly.net
192.30.255.113 http://github.com  #此处112还是113根据自己的情况调整？
2、刷新DNS缓存
linux：

sudo /etc/init.d/networking restart
1
windows：

ipconfig /flushdns
1
mac：

 sudo killall -HUP mDNSResponder
------------------------------------------------------------
免密码push
之前使用的是http方式clone每次push都要输入用户名和密码
1.到git仓库查看你的ssh地址
2.git remote -v查看你本地的是不是http方式
3. git remote remove origin 删除原有方式
4.git remote add origin git地址  添加新的方式
------------------------------------------------------------
下载git sudo apt-get install git

1.git init 创建本地仓库
2.git config
	git config --list  查看
	git config user.name
	git config --global user.name "ak"
	git config --global user.email 18329032039@163.com
3.别名
	$ git config --global alias.co checkout
	$ git config --global alias.br branch
	$ git config --global alias.ci commit
	$ git config --global alias.st status
5.本地电脑关联github
	1.创建ssh key
	ssh-keygen -t rsa -C "18329032039@163.com" 一路回车
	$ ssh-keygen -t rsa -C "18329032039@163.com"
	Generating public/private rsa key pair.
	Enter file in which to save the key (/c/Users/Shinelon/.ssh/id_rsa):
	Created directory '/c/Users/Shinelon/.ssh'.
	Enter passphrase (empty for no passphrase):
	Enter same passphrase again:
	Your identification has been saved in /c/Users/Shinelon/.ssh/id_rsa.
	public key has been saved in /c/Users/Shinelon/.ssh/id_rsa.pub.
	The key fingerprint is:
	SHA256:7RUUG/TAAvWlc3h37MNv7ZQBRH1uh/V+Dwpm5AZhUWM 18329032039@163.com
	The key's randomart image is:
	2.查看内容start ~/.ssh/id_rsa.pub      复制ssk到github创建sshkey
	3.测试是否连接github成功   假如有出现一堆话 选择yes 再次测试就好了   ssh -T git@github.com
	4.出现如下样子就OK了
	$ ssh -T git@github.com
	Hi kalaneryok! You've successfully authenticated, but GitHub does not provide shell access.

6.查看远程仓库
	git remote
	0.github上面的远程仓库在创建的时候不要旋转readme的那个√，这个表示马上初始化，那么你本地的
	仓库需要上传过来就会提示报错，所以不要初始化
	1.将本地的仓库传送到远程仓库
	$ git remote add origin xxxxxx远程仓库地址
	2.推送到远端仓库
		git remote add origin git@github.com:kalaneryok/my_notes.git
		git push -u origin master     git push origin master
		后续不带u就行 -u关联分支
		
7.克隆远程仓库
		git clone git@github.com:kalaneryok/myOrgPiPc2Pro_uboot.git

8.将本地的文件存到github上
	在git上创建仓库不要勾选init
	2.git上会有操作步骤
	echo "# project" >> README.md
	git init
	git add README.md
	git commit -m "first commit"
	git remote add origin git@github.com:kalaneryok/project.git
	git push -u origin master
9.reset撤销
	git status 先看一下add 中的文件 
	git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 
	git reset HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了
10基本使用操作---------------------------------------------------------
1.查看修改历史
	git log --oneline  显示一栏
	git log --name-only 显示每次修改的文件列表
	git log --name-status 显示每次修改的文件列表及修改文件的状态M A D
2.查看文件不同之处
	git diff --cached   xxx   比较缓存区和本地版本库的差异
	git diff head    xxx   比较工作区和本地最新版本库的差异
	git diff commit-id xxx  比较工作区和指定commitid的差异
	git diff commit-id commit-id  比较两次提交的差异
3.添加全局仓库忽略文件
	创建文件.gitignore
	*.[oa] //忽略.o  .a文件
	！my.a //除了my.a不忽略
	dbg    //忽略dbg文件和目录
	！dgb/ //除了目录不忽略（两条一起用）
	/dbg   //只忽略当前dbg目录，子目录中的dbg目录不忽略
	当向创建一个文件但是这个文件被你之前忽略掉了导致添加不上但你有不知道
	可以检查下aaa.txt 文件
	git check-ignore -v aaa.txt
4.删除某个文件的版本控制  当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用
	git rm --cached file_path
	git commit -m 'delete remote somefile'
	假如本地也不想要了的话
	git rm file_path
	git commit -m 'delete remote somefile'
	//删除untracked 文件  慎用慎用慎用最好不要用
	git clean -n//删除前?一眼
	git clean -f 删掉然后本地的也会被删除
5.版本回退
	git reset --hard HEAD^   回退到上一个版本 ^^上两个版本   HEAD~100上100个版本   git reset --hard avbababbab编号
5.git reflog  列出head的指向记录
6.git checkout -- a.txt 让a.txt回到最近一次commit或者add时的状态（撤销操作工作区的文件） ，注意-- 不然就到切换分支的命令了
7.git reset HEAD a.txt  reset 既可以回退版本也可以吧暂存区的修改退回到工作区，然后工作区的修改可以退回到提交时刻的状态
8.删除问题
	git rm a.txt
	git commit 
	不小心删了但是还没有提交ci 还可以git checkout -- a.txt 回来
9.推送
	关联远程库 git remote add origin xxx
	git push -u origin master 推送master分支所有内容 -u 选择默认主机，后面推送就可以直接使用git push
10.分支操作
	git reflog show dev_bugfix 查看对分支的历史从无到有
	1.创建dev分支
		git checkout -b dev // -b 创建并切换分支相当于 git branch dev  、、 git checkout dev
	2.查看当前分支 
		git branch
	3.切换分支 巴拉巴拉一顿修改想要切回主分支
		git checkout master
	4.把dev分支的内容合并到主分支  merge 将指定分支合并到当前分支
		git merge dev
	5.删除分支
		git branch -d dev
	6.merge 冲突
		使用git st 查看冲突
		打开冲突文件修改后上库ci
	7.查看分支合并情况
		git log --graph --pretty==oneline --abbrev-commit
	8.fast forward合并看不出来曾经做过合并，然后使用log 可以查看到分支合并历史
		git merge --no-ff -m "xxxxxxxx" dev
		git log --graph --pretty==oneline --abbrev-commit
	9.当前在dev 还没提交（做到一半还不足以提交）需要切换到master处理bug
		git stash  可以使用git st查看干净的，把当前的工作现场保护起来的了，然后可以大胆切到其他分支去干活
		切回来后查看刚刚的工作现场
		git stash list
		恢复现场但不删除stash内容，假如需要删除使用git stash drop 来删除
		git stash apply
		恢复现场同时删除stash内容
		git stash pop
		
		假如有多个 stash 指定的恢复
		git stash apply stash@{0}
	10.标签，某次ci 的快照，利用tag 找ci号很容易了
		git  branch  查看分支
		git checkout master 切换分支
		git tag V1.0   对当前最新的ci打标签
		git tag v0.9  f325d322  对这个好打标签
		git tag 查看标签
		git show v0.9 查看这个标签信息
		git tag -a v1.2 -m "adsfasdfas " f32e213  多写点内容
		git tag -d v0.9  删除标签
		推送远程标签
		git push origi v0.9
		git push origin --tags  一次性推送所有标签
		想要删除远程标签
		先删除本地-d 标签，然后  git push origin :refs/tags/v0.9